-- AADL-BA-FrontEnd
 
-- Copyright Â© 2011 TELECOM ParisTech and CNRS
 
-- TELECOM ParisTech/LTCI

-- Authors: see AUTHORS
 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php

-- Behavior Annex property reference tests.

package PropertyReferenceTest
public
   with Data_Model, Base_Types, AadlBaTestPropertySet, AadlBaTest::Types, AadlBaTestSubprogram ;

data MyEnum

 properties
   Data_Model::Data_Representation => Enum;
   Data_Model::Enumerators => ("unknown", "monday", "thuesday", "wednesday", "thrusday",
                              "friday", "saturday", "sunday");
   Data_Model::Representation => ("0","1","2","3","4","5","6","7");

end MyEnum ;

data Generic_List

   properties
   
   Data_Model::Data_Representation => Array ;

end Generic_List ;

data MyInteger

  properties
    
    Data_Model::Data_Representation => Integer ;
    Data_Model::Integer_Range => 0 .. 99 ;    

end MyInteger ;


thread MyThread

 prototypes
 
   portPrototypeMyInteger : feature ;
 
 features
 
   portMyInteger : in data port MyInteger ;

end MyThread ;

thread implementation MyThread.impl
 (portPrototypeMyInteger => requires data access MyInteger)
  
 subcomponents
 
   subList : data Generic_List { 
                                 Data_Model::Base_Type => (classifier (MyInteger));
                                 Data_Model::Dimension => (100);
                               };
   
 properties
  Dispatch_Protocol => Periodic;
  Period => 1 sec;
  AadlBaTestPropertySet::aRecord => [bool => true ; int => 100 ; enum => Periodic ;] ;
  
 annex behavior_specification {**

--  *** STATES ***

variables

 int : Base_Types::Integer ;
 ratio : Base_Types::Integer ;
 localMyEnum : MyEnum ;
 localDays : AadlBaTest::Types::Days.v1 ;
 
states
 
 uniqueState : initial complete final state ;
 a : state ;

-- *** TRANSITIONS ***

transitions

 -- Valid tests
 
   -- Property value from: 
   
   a -[]-> a {int := #AadlBaTestPropertySet::aValue }; -- a property set value
   a -[]-> a {int := #AadlBaTestPropertySet::aRecord.int }; -- a property set record
   a -[]-> a {int := sublist#Dimension[0]}; -- a subcomponent
   a -[]-> a {int := portMyInteger#Integer_Range.upper_bound}; -- a feature
   a -[]-> a {int := portPrototypeMyInteger#Integer_Range.lower_bound}; -- a binded feature
   a -[]-> a {int := localMyEnum#Representation[0]}; -- local variable
   a -[]-> a {int := PropertyReferenceTest::MyThread.impl#aRecord.int }; -- a classifier
   a -[]-> a {int := MyThread.impl#aRecord.int }; -- a classifier
   a -[]-> a {int := #AadlBaTestPropertySet::aList.hello }; -- a property set list with default values 
   
   -- Enumerations
   
   a -[]-> a {
               localMyEnum := MyEnum#Enumerators.monday;
               localDays := AadlBaTest::Types::Days.v1#Enumerators.monday
             };
           
   -- Real life examples
   
   a -[]-> a {
               localDays := AadlBaTest::Types::Days.v1#Enumerators.monday;
               -- localDays has been modified ...
               if(localDays = AadlBaTest::Types::Days.v1#Enumerators.thuesday)
                 int := 1
               else
                 int := 0
               end if
             };
            
   a -[]-> a { 
               for(index : MyInteger in 0 .. subList#Dimension)
               {
               subList[index] := 0
             }
           };
**};  

end MyThread.impl ;

end PropertyReferenceTest;