--  Behavior Annex 2.11-18082009
--  Annex X.4 Thread Dispatch Behavior Specification
--  Example 3

--  $Id: ba_example_003.aadl 131 2009-10-28 12:52:35Z lasnier $

-- Next example shows various dispatch conditions and transition actions. The 
-- timeout value is given by the Period property of the thread. States st and -- sf are complete states and thus outgoing transitions are triggered by 
-- dispatch conditions, whereas s1 and s2 are execute states and outgoing 
-- transitions are guarded by logical expressions.

package example3 
public

   with Base_Types ;

thread sender
features
  d: out event data port Base_Types::Integer;
  a: in event data port Base_Types::Integer;
properties
  Dispatch_Protocol => Timed;
  Period => 10 ms;
end sender;

thread implementation sender.v1
subcomponents
  v: data Base_Types::Integer;
annex behavior_specification {**
  states
    st: initial complete state;
    sf: complete final state;
    s1, s2: state;
  transitions
    st -[on dispatch timeout]-> st { v := 1; d!(v) };
    st -[on dispatch a ]-> s1;
    s1 -[a=1]-> sf;
    s1 -[a=0]-> st;
    sf -[on dispatch timeout]-> sf { v := 0; d!(v) };
    sf -[on dispatch a ]-> s2;
    s2 -[a=0]-> st;
    s2 -[a=1]-> sf;
**};
end sender.v1;

-- In a second version, it is possible to eliminate the need to maintain 
-- state in the data component v. The state information is already reflected -- in the state automaton.

thread implementation sender.v2
annex behavior_specification {**
  states
    st: initial complete state;
    sf: complete final state;
    s1, s2: state;
  transitions
    st -[on dispatch timeout]-> st { d!(1) };
    st -[on dispatch a ]-> s1;
    s1 -[a=1]-> sf;
    s1 -[a=0]-> st;
    sf -[on dispatch timeout]-> sf { d!(0) };
    sf -[on dispatch a ]-> s2;
    s2 -[a=0]-> st;
    s2 -[a=1]-> sf;
**};
end sender.v2;

-- Finally, it is also possible to eliminate intermediate states. Note the 
-- use of the others reserved word to ensure that all the combinations of 
-- data input are managed.

thread implementation sender.v3
annex behavior_specification {**
  states
    st: initial complete state;
    sf: complete final state;
  transitions
    st -[on dispatch timeout]-> st { d!(1) };
    st -[on dispatch a(1) ]-> sf;
    st -[on dispatch a(others) ]-> st;
    sf -[on dispatch timeout]-> sf { d!(0) };
    sf -[on dispatch a(0) ]-> st;
    sf -[on dispatch a(others) ]-> sf;
**};
end sender.v3;

end example3;