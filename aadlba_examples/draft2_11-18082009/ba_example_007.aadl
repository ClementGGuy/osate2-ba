--  Behavior Annex 2.11-18082009
--  Annex X.8 Synchronization Protocols
--  Example 7

--  $Id: ba_example_007.aadl 131 2009-10-28 12:52:35Z lasnier $

-- Following example shows the use of a LSER  call between a client thread
-- and a server thread. The client thread does not need to wait for the
-- completion of the call. Result values are later returned by the server 
-- thanks to subprogram call to the client.

package example7 
public

process client_server
end client_server;

process implementation client_server.i
subcomponents
  c : thread a_client;
  s : thread a_server.i;
connections
  access c.result -> s.return;
  access s.long -> c.pre;
  access s.short -> c.post;
end client_server.i;

thread a_client
features
  pre : requires subprogram access long_computation;
  post : requires subprogram access short_computation;
  call_back : provides subprogram access computation_result
    { Behavior_Properties::Subprogram_Call_Protocol => HSER; };
properties
  Dispatch_Protocol => Hybrid;
  Period => 100ms;
annex behavior_specification {**
  variables
    x,y : Base_Types::Integer;
  states
    s0 : initial complete final state;
    s1 : complete state;
  transitions
    s0 -[ on dispatch ]-> s1 { pre!; computation(50ms) };
    s1 -[ on dispatch call_back ]-> s0 
	{ call_back!(x); if(x!=0) post!(x,y) end if };
**};
end a_client;

thread a_server
features
  long : provides subprogram access long_computation 
    { Behavior_Properties::Subprogram_Call_Protocol => LSER; };
  short : provides subprogram access short_computation
    { Behavior_Properties::Subprogram_Call_Protocol => HSER; };
  return : requires subprogram access computation_result;
properties
  Dispatch_Protocol => Aperiodic;
end a_server;

thread implementation a_server.i
subcomponents
  local_long_computation : subprogram long_computation;
  local_short_computation : subprogram short_computation;
connections
  access local_long_computation -> long;
  access local_short_computation -> short;
  access return -> local_long_computation.return;
annex behavior_specification {**
  states
    s0 : initial complete final state;
    s1 : complete state;
  transitions
    s0 -[ on dispatch long ]-> s1 { long! };
    s1 -[ on dispatch short ]-> s0 { short! };
**};
end a_server.i;

subprogram long_computation
features
  return : requires subprogram access computation_result;
annex behavior_specification {**
  states
    s0 : initial final state;
  transitions
    s0 -[]-> s0 { computation(50ms); return!(1) };
**};
end long_computation;

subprogram short_computation
features
  input : in parameter Base_Types::Integer;
  output : out parameter Base_Types::Integer;
end short_computation;

subprogram computation_result
features
  output : out parameter Base_Types::Integer;
end computation_result;

end example7;